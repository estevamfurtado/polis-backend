//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table State {
  id Int [increment, unique, not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  name String [not null]
  abbreviation String [pk, unique]
  people Person [not null]
  politicians Politician [not null]
  records Record [not null]
}

Table Person {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  name String [not null]
  cpf String [unique]
  password String
  phone String
  email String
  birthDate DateTime
  sex Sex
  gender String
  economicClass EconomicClass
  skinColor SkinColor
  voteStateAbbreviation String
  diplomaticAxis Int
  economicAxis Int
  civilAxis Int
  socialAxis Int
  voteState State
  deck Card [not null]
  packs Int [not null, default: 0]
  politician Politician
  lastFreePackAt DateTime
  lastPackAt DateTime
  exchangesProposed ExchangeRequest [not null]
  exchangesRequested ExchangeRequest [not null]
  isActive Boolean [not null, default: false]
  myFriends Friendship [not null]
  friendshipRequested Friendship [not null]
}

Table Friendship {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  user Person [not null]
  userId Int [not null]
  friend Person [not null]
  friendId Int [not null]
  status FriendshipStatus [not null]
}

Table Party {
  id Int [increment, unique, not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  cnpj String [unique, not null]
  name String [not null]
  logoUrl String
  abbreviation String [pk, unique]
  email String
  password String
  mainColor String
  secondaryColor String
  about String
  politicians Politician [not null]
  records Record [not null]
  partyRecords PartyRecord [not null]
}

Table Politician {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  name String [not null]
  description String [not null]
  person Person [not null]
  personId Int [unique, not null]
  officialId String [unique, not null]
  party Party [not null]
  partyAbbreviation String [not null]
  state State [not null]
  stateAbbreviation String [not null]
  imageUrl String [not null]
  records Record [not null]
}

Table Ranking {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  year Int [unique, not null]
  title String [not null]
  records Record [not null]
  partyRecords PartyRecord [not null]
}

Table Record {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  politician Politician
  politicianId Int
  sourceId String
  sourceUrl String
  sourceName String
  ranking Ranking [not null]
  rankingId Int [not null]
  partyRecord PartyRecord [not null]
  partyRecordId Int [not null]
  party Party
  partyAbbreviation String
  state State
  stateAbbreviation String
  candidateType String
  quantityVote Int
  reelected Boolean
  cutAidShift Boolean
  isPresident Boolean
  cutHousingAllowance Boolean
  cutRetirement Boolean
  requestedFamilyPassport Boolean
  quotaAmountSum Int
  scorePresence Float
  scoreSaveQuota Float
  scoreProcess Float
  scoreInternal Float
  scorePrivileges Float
  scoreWastage Float
  scoreTotal Float
  scoreRanking Int
  scoreRankingByPosition Int
  scoreRankingByParty Int
  scoreRankingByState Int
  scorePresenceFormula String
  scoreProcessFormula String
  scorePrivilegesFormula String
  scoreSaveQuotaFormula String
  scoreWastageFormula String
  scoreTotalFormula String
  parliamentarianCount Int
  parliamentarianStateCount Int
  parliamentarianStaffMaxYear Float
  parliamentarianQuotaMaxYear Float
  stickerId Int [unique]
  Sticker Sticker

  indexes {
    (rankingId, politicianId) [unique]
  }
}

Table PartyRecord {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  ranking Ranking [not null]
  rankingYear Int [not null]
  party Party [not null]
  partyAbbreviation String [not null]
  records Record [not null]
  scorePresenceSum Float [not null, default: 0]
  scorePresenceCount Int [not null, default: 0]
  scorePresence Float [not null, default: 0]
  scoreSaveQuotaSum Float [not null, default: 0]
  scoreSaveQuotaCount Int [not null, default: 0]
  scoreSaveQuota Float [not null, default: 0]
  scoreProcessSum Float [not null, default: 0]
  scoreProcessCount Int [not null, default: 0]
  scoreProcess Float [not null, default: 0]
  scoreInternalSum Float [not null, default: 0]
  scoreInternalCount Int [not null, default: 0]
  scoreInternal Float [not null, default: 0]
  scorePrivilegesSum Float [not null, default: 0]
  scorePrivilegesCount Int [not null, default: 0]
  scorePrivileges Float [not null, default: 0]
  scoreWastageSum Float [not null, default: 0]
  scoreWastageCount Int [not null, default: 0]
  scoreWastage Float [not null, default: 0]
  scoreTotalSum Float [not null, default: 0]
  scoreTotalCount Int [not null, default: 0]
  scoreTotal Float [not null, default: 0]
  sticker Sticker

  indexes {
    (rankingYear, partyAbbreviation) [unique]
  }
}

Table Album {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  title String [not null]
  year Int [unique, not null]
  description String [not null]
  coverUrl String
  thumbUrl String
  pages Page [not null]

  indexes {
    (year, title) [unique]
  }
}

Table Page {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  badge String [not null]
  title String [not null]
  description String [not null]
  backgroundColor String
  albumId Int [not null]
  album Album [not null]
  orderInAlbum Int [not null]
  stickers Sticker [not null]

  indexes {
    (albumId, title) [unique]
  }
}

Table Sticker {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  orderInPage Int [not null]
  pageId Int [not null]
  page Page [not null]
  type StickerTypes [not null, default: 'politician']
  availability StickerAvailabilityTypes [not null, default: 'easy']
  identifier String [not null]
  title String [not null]
  imageUrl String [not null]
  politicianRecord Record
  politicianRecordId Int [unique]
  partyRecord PartyRecord
  partyRecordId Int [unique]
  cards Card [not null]

  indexes {
    (pageId, identifier) [unique]
  }
}

Table Card {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  sticker Sticker [not null]
  stickerId Int [not null]
  isPasted Boolean [not null, default: false]
  forExchange Boolean [not null, default: true]
  owner Person
  ownerId Int
  offeredAt ExchangeRequest [not null]
  requestedAt ExchangeRequest [not null]
}

Table ExchangeRequest {
  id Int [pk, increment]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  status ExchangeStatus [not null, default: 'pending']
  cardsOffered Card [not null]
  cardsRequested Card [not null]
  proposerId Int [not null]
  proposer Person [not null]
  requestedId Int [not null]
  requested Person [not null]
}

Table CardExchangeOfferedCard {
  offeredatId Int [ref: > ExchangeRequest.id]
  cardsofferedId Int [ref: > Card.id]
}

Table CardExchangeRequestedCard {
  requestedatId Int [ref: > ExchangeRequest.id]
  cardsrequestedId Int [ref: > Card.id]
}

Enum EconomicClass {
  A
  B
  C
  D
  E
}

Enum SkinColor {
  White
  Black
  Brown
  Yellow
  Other
}

Enum Sex {
  Male
  Female
}

Enum ReactionTypes {
  like
  dislike
}

Enum StickerAvailabilityTypes {
  easy
  medium
  rare
}

Enum StickerTypes {
  party
  politician
  moment
}

Enum PartyScoreTypes {
  scorePresence
  scoreSaveQuota
  scoreProcess
  scoreInternal
  scorePrivileges
  scoreWastage
  scoreTotal
}

Enum ExchangeStatus {
  pending
  accepted
  rejected
  canceled
}

Enum FriendshipStatus {
  pending
  accepted
  rejected
  canceled
}

Ref: Person.voteStateAbbreviation > State.abbreviation

Ref: Friendship.userId > Person.id

Ref: Friendship.friendId > Person.id

Ref: Politician.personId - Person.id

Ref: Politician.partyAbbreviation > Party.abbreviation

Ref: Politician.stateAbbreviation > State.abbreviation

Ref: Record.politicianId > Politician.id

Ref: Record.rankingId > Ranking.id

Ref: Record.partyRecordId > PartyRecord.id

Ref: Record.partyAbbreviation > Party.abbreviation

Ref: Record.stateAbbreviation > State.abbreviation

Ref: PartyRecord.rankingYear > Ranking.year

Ref: PartyRecord.partyAbbreviation > Party.abbreviation

Ref: Page.albumId > Album.id

Ref: Sticker.pageId > Page.id

Ref: Sticker.politicianRecordId - Record.id

Ref: Sticker.partyRecordId - PartyRecord.id

Ref: Card.stickerId > Sticker.id

Ref: Card.ownerId > Person.id

Ref: ExchangeRequest.proposerId > Person.id

Ref: ExchangeRequest.requestedId > Person.id