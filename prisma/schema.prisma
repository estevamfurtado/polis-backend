generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// MODELS -----------------------------------------------------------------

model State {
  id           Int          @unique @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  name         String
  abbreviation String       @id @unique
  people       Person[]
  politicians  Politician[]
  candidates   Candidate[]
  records      Record[]
}

model Person {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name     String
  cpf      String? @unique
  password String?
  phone    String?
  email    String?

  birthDate     DateTime?
  sex           Sex?
  gender        String?
  economicClass EconomicClass?
  skinColor     SkinColor?

  voteStateAbbreviation String?
  contact               Contact?

  diplomaticAxis Int?
  economicAxis   Int?
  civilAxis      Int?
  socialAxis     Int?

  voteState State? @relation(fields: [voteStateAbbreviation], references: [abbreviation])

  reactions Reaction[]

  politicianProfile Politician?
  candidateProfile  Candidate?

  deck  Card[]
  packs Int    @default(18)
}

model Party {
  id        Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  cnpj           String  @unique
  name           String
  logoUrl        String?
  abbreviation   String  @id @unique
  email          String?
  password       String?
  mainColor      String?
  secondaryColor String?
  about          String?

  contact Contact?

  politicians Politician[]
  candidates  Candidate[]

  records Record[]
}

model Contact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  phone     String?
  email     String?
  address   String?
  twitter   String?
  facebook  String?
  instagram String?
  linkedin  String?
  youtube   String?
  website   String?

  person   Person? @relation(fields: [personId], references: [id])
  personId Int?    @unique

  party             Party?  @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String? @unique
}

model Candidate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String
  description String
  person      Person @relation(fields: [personId], references: [id])
  personId    Int    @unique

  party             Party  @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String

  state             State  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String

  reactions   Reaction[]
  shortVideos CandidateShortVideo[]
}

model CandidateShortVideo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title     String
  url       String
  thumbnail String?

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int       @unique
}

model Politician {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String
  description String
  person      Person @relation(fields: [personId], references: [id])
  personId    Int    @unique
  officialId  String @unique

  party             Party  @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String

  state             State  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String

  imageUrl String
  records  Record[]
}

model Reaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  type ReactionTypes

  person   Person @relation(fields: [personId], references: [id])
  personId Int

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int

  comment String?
}

model Ranking {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  year    Int      @unique
  title   String
  records Record[]
}

model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  politician   Politician? @relation(fields: [politicianId], references: [id])
  politicianId Int?

  sourceId   String?
  sourceUrl  String?
  sourceName String?

  ranking   Ranking @relation(fields: [rankingId], references: [id])
  rankingId Int

  party             Party?  @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String?

  state             State?  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String?

  candidateType String?

  quantityVote            Int?
  reelected               Boolean?
  cutAidShift             Boolean?
  isPresident             Boolean?
  cutHousingAllowance     Boolean?
  cutRetirement           Boolean?
  requestedFamilyPassport Boolean?
  quotaAmountSum          Int?

  scorePresence   Float?
  scoreSaveQuota  Float?
  scoreProcess    Float?
  scoreInternal   Float?
  scorePrivileges Float?
  scoreWastage    Float?
  scoreTotal      Float?

  scoreRanking           Int?
  scoreRankingByPosition Int?
  scoreRankingByParty    Int?
  scoreRankingByState    Int?

  scorePresenceFormula   String?
  scoreProcessFormula    String?
  scorePrivilegesFormula String?
  scoreSaveQuotaFormula  String?
  scoreWastageFormula    String?
  scoreTotalFormula      String?

  parliamentarianCount        Int?
  parliamentarianStateCount   Int?
  parliamentarianStaffMaxYear Float?
  parliamentarianQuotaMaxYear Float?

  cardModel CardModel?

  @@unique([rankingId, politicianId])
}

model Album {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title       String
  year        Int    @unique
  description String

  coverUrl String?
  thumbUrl String?

  entryPage   Page?  @relation(name: "EntryPage", fields: [entryPageId], references: [id])
  entryPageId Int?   @unique
  pages       Page[] @relation("Pages")

  @@unique([year, title])
}

model Page {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title           String
  description     String
  backgroundColor String?

  successorId Int?  @unique
  successor   Page? @relation("PagesOrder", fields: [successorId], references: [id])
  predecessor Page? @relation("PagesOrder")

  albumId      Int
  entryInAlbum Album? @relation("EntryPage")
  album        Album  @relation(name: "Pages", fields: [albumId], references: [id])

  entrySticker   Sticker?  @relation(name: "EntrySticker", fields: [entryStickerId], references: [id])
  entryStickerId Int?      @unique
  stickers       Sticker[] @relation("Stickers")

  @@unique([albumId, title])
}

model Sticker {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  pageId Int

  card       CardModel @relation(fields: [cardId], references: [id])
  cardId     Int
  identifier String

  successorId Int?     @unique
  successor   Sticker? @relation("StickersOrder", fields: [successorId], references: [id])
  predecessor Sticker? @relation("StickersOrder")

  entryInPage Page? @relation("EntrySticker")
  page        Page  @relation(name: "Stickers", fields: [pageId], references: [id])

  @@unique([pageId, identifier])
}

model CardModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  record   Record? @relation(fields: [recordId], references: [id])
  recordId Int?    @unique

  variant  String @default("normal")
  imageUrl String

  stickers Sticker[]
  cards    Card[]
}

model Card {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  model   CardModel @relation(fields: [modelId], references: [id])
  modelId Int

  isPasted Boolean @default(false)

  owner   Person? @relation(fields: [ownerId], references: [id])
  ownerId Int?
}

// ENUMS -----------------------------------------------------------------

enum EconomicClass {
  A
  B
  C
  D
  E
}

enum SkinColor {
  White
  Black
  Brown
  Yellow
  Other
}

enum Sex {
  Male
  Female
}

enum ReactionTypes {
  like
  dislike
}
