generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// MODELS -----------------------------------------------------------------

model State {
  id           Int          @unique @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  name         String
  abbreviation String       @id @unique
  people       Person[]
  politicians  Politician[]
  records      Record[]
}

model Person {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name     String
  cpf      String? @unique
  password String?
  phone    String?
  email    String?

  birthDate     DateTime?
  sex           Sex?
  gender        String?
  economicClass EconomicClass?
  skinColor     SkinColor?

  voteStateAbbreviation String?

  diplomaticAxis Int?
  economicAxis   Int?
  civilAxis      Int?
  socialAxis     Int?

  voteState State? @relation(fields: [voteStateAbbreviation], references: [abbreviation])

  deck       Card[]
  packs      Int         @default(18)
  politician Politician?
}

model Party {
  id        Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  cnpj           String  @unique
  name           String
  logoUrl        String?
  abbreviation   String  @id @unique
  email          String?
  password       String?
  mainColor      String?
  secondaryColor String?
  about          String?

  politicians  Politician[]
  records      Record[]
  partyRecords PartyRecord[]
}

model Politician {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String
  description String
  person      Person @relation(fields: [personId], references: [id])
  personId    Int    @unique
  officialId  String @unique

  party             Party  @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String

  state             State  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String

  imageUrl String
  records  Record[]
}

model Ranking {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  year         Int           @unique
  title        String
  records      Record[]
  partyRecords PartyRecord[]
}

model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  politician   Politician? @relation(fields: [politicianId], references: [id])
  politicianId Int?

  sourceId   String?
  sourceUrl  String?
  sourceName String?

  ranking   Ranking @relation(fields: [rankingId], references: [id])
  rankingId Int

  partyRecord   PartyRecord @relation(fields: [partyRecordId], references: [id])
  partyRecordId Int

  party             Party?  @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String?

  state             State?  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String?

  candidateType String?

  quantityVote            Int?
  reelected               Boolean?
  cutAidShift             Boolean?
  isPresident             Boolean?
  cutHousingAllowance     Boolean?
  cutRetirement           Boolean?
  requestedFamilyPassport Boolean?
  quotaAmountSum          Int?

  scorePresence   Float?
  scoreSaveQuota  Float?
  scoreProcess    Float?
  scoreInternal   Float?
  scorePrivileges Float?
  scoreWastage    Float?
  scoreTotal      Float?

  scoreRanking           Int?
  scoreRankingByPosition Int?
  scoreRankingByParty    Int?
  scoreRankingByState    Int?

  scorePresenceFormula   String?
  scoreProcessFormula    String?
  scorePrivilegesFormula String?
  scoreSaveQuotaFormula  String?
  scoreWastageFormula    String?
  scoreTotalFormula      String?

  parliamentarianCount        Int?
  parliamentarianStateCount   Int?
  parliamentarianStaffMaxYear Float?
  parliamentarianQuotaMaxYear Float?

  stickerId Int?     @unique
  Sticker   Sticker?

  @@unique([rankingId, politicianId])
}

model PartyRecord {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  ranking     Ranking @relation(fields: [rankingYear], references: [year])
  rankingYear Int

  party             Party  @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String

  records Record[]

  scorePresenceSum   Float @default(0)
  scorePresenceCount Int   @default(0)
  scorePresence      Float @default(0)

  scoreSaveQuotaSum   Float @default(0)
  scoreSaveQuotaCount Int   @default(0)
  scoreSaveQuota      Float @default(0)

  scoreProcessSum   Float @default(0)
  scoreProcessCount Int   @default(0)
  scoreProcess      Float @default(0)

  scoreInternalSum   Float @default(0)
  scoreInternalCount Int   @default(0)
  scoreInternal      Float @default(0)

  scorePrivilegesSum   Float @default(0)
  scorePrivilegesCount Int   @default(0)
  scorePrivileges      Float @default(0)

  scoreWastageSum   Float @default(0)
  scoreWastageCount Int   @default(0)
  scoreWastage      Float @default(0)

  scoreTotalSum   Float @default(0)
  scoreTotalCount Int   @default(0)
  scoreTotal      Float @default(0)

  sticker Sticker?

  @@unique([rankingYear, partyAbbreviation])
}

model Album {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title       String
  year        Int    @unique
  description String

  coverUrl String?
  thumbUrl String?

  pages Page[]

  @@unique([year, title])
}

model Page {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title           String
  description     String
  backgroundColor String?

  albumId      Int
  album        Album @relation(fields: [albumId], references: [id])
  orderInAlbum Int

  stickers Sticker[]

  @@unique([albumId, title])
}

model Sticker {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderInPage Int
  pageId      Int
  page        Page @relation(fields: [pageId], references: [id])

  type         StickerTypes             @default(politician)
  availability StickerAvailabilityTypes @default(easy)

  identifier String
  title      String
  imageUrl   String

  politicianRecord   Record? @relation(fields: [politicianRecordId], references: [id])
  politicianRecordId Int?    @unique

  partyRecord   PartyRecord? @relation(fields: [partyRecordId], references: [id])
  partyRecordId Int?         @unique

  Card Card[]

  @@unique([pageId, identifier])
}

model Card {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  sticker   Sticker @relation(fields: [stickerId], references: [id])
  stickerId Int

  isPasted Boolean @default(false)
  isNew    Boolean @default(false)

  owner   Person? @relation(fields: [ownerId], references: [id])
  ownerId Int?
}

// ENUMS -----------------------------------------------------------------

enum EconomicClass {
  A
  B
  C
  D
  E
}

enum SkinColor {
  White
  Black
  Brown
  Yellow
  Other
}

enum Sex {
  Male
  Female
}

enum ReactionTypes {
  like
  dislike
}

enum StickerAvailabilityTypes {
  easy
  medium
  rare
}

enum StickerTypes {
  party
  politician
  moment
}

enum PartyScoreTypes {
  scorePresence
  scoreSaveQuota
  scoreProcess
  scoreInternal
  scorePrivileges
  scoreWastage
  scoreTotal
}
