generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// MODELS -----------------------------------------------------------------

model State {
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now())
  name          String
  abbreviation  String                @id @unique
  people        Person[]
  politicians   Politician[]
  candidates    Candidate[]
  RankingRecord PoliticianInRanking[]
}

model View {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String
  description String

  economicFreedom  Int?
  personalFreedom  Int?
  politicalFreedom Int?

  people     Person[]
  parties    PoliticalParty[]
  candidates Candidate[]
}

model Person {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name     String
  cpf      String? @unique
  password String?
  phone    String?
  email    String?

  birthDate     DateTime?
  sex           Sex?
  gender        String?
  economicClass EconomicClass?
  skinColor     SkinColor?

  voteState             State  @relation(fields: [voteStateAbbreviation], references: [abbreviation])
  voteStateAbbreviation String

  contact Contact?

  views      View[]
  sentiments Sentiment[]

  politicianProfile Politician?
  candidateProfile  Candidate?
  Album             Album?      @relation(fields: [albumId], references: [id])
  albumId           Int?
  Deck              Deck[]
}

model PoliticalParty {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  cnpj           String  @unique
  name           String
  logoUrl        String?
  abbreviation   String  @id @unique
  email          String?
  password       String?
  mainColor      String?
  secondaryColor String?
  about          String?

  contact Contact?
  views   View[]

  politicians Politician[]
  candidates  Candidate[]

  rankingRecords PoliticianInRanking[]
}

model Contact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  phone     String?
  email     String?
  address   String?
  twitter   String?
  facebook  String?
  instagram String?
  linkedin  String?
  youtube   String?
  website   String?

  person   Person? @relation(fields: [personId], references: [id])
  personId Int?    @unique

  party             PoliticalParty? @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String?         @unique
}

model Candidate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String
  description String
  person      Person @relation(fields: [personId], references: [id])
  personId    Int    @unique

  party             PoliticalParty @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String

  state             State  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String

  views      View[]
  sentiments Sentiment[]
}

model Politician {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String
  description String
  person      Person @relation(fields: [personId], references: [id])
  personId    Int    @unique
  officialId  String @unique

  party             PoliticalParty @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String

  state             State  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String

  imageUrl String
  rankings PoliticianInRanking[]
}

model Sentiment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name String

  person   Person @relation(fields: [personId], references: [id])
  personId Int    @unique

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int       @unique

  imageUrl String
}

// year + title together should be unique
model Ranking {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  year    Int
  title   String
  records PoliticianInRanking[]

  @@unique([year, title])
}

model PoliticianInRanking {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  politician   Politician? @relation(fields: [politicianId], references: [id])
  politicianId Int?

  sourceId   String?
  sourceUrl  String?
  sourceName String?

  ranking   Ranking @relation(fields: [rankingId], references: [id])
  rankingId Int

  party             PoliticalParty? @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String?

  state             State  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String

  candidateType String

  quantityVote            Int
  reelected               Boolean
  cutAidShift             Boolean
  isPresident             Boolean
  cutHousingAllowance     Boolean
  cutRetirement           Boolean
  requestedFamilyPassport Boolean
  quotaAmountSum          Int

  scorePresence   Float
  scoreSaveQuota  Float
  scoreProcess    Float
  scoreInternal   Float
  scorePrivileges Float
  scoreWastage    Float
  scoreTotal      Float

  scoreRanking           Float
  scoreRankingByPosition Float
  scoreRankingByParty    Float
  scoreRankingByState    Float

  scorePresenceFormula        String
  scoreProcessFormula         String
  scorePrivilegesFormula      String
  scoreSaveQuotaFormula       String
  scoreWastageFormula         String
  scoreTotalFormula           String
  parliamentarianCount        String
  parliamentarianStateCount   String
  parliamentarianStaffMaxYear String
  parliamentarianQuotaMaxYear String

  card CardModel?

  @@unique([rankingId, politicianId])
}

model Album {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title       String
  year        Int
  description String

  coverUrl String
  thumbUrl String

  pages AlbumPage[]

  owners Person[]
  Deck   Deck[]

  @@unique([year, title])
}

model AlbumPage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title           String
  description     String
  backgroundColor String?

  album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  stickers Sticker[]

  @@unique([albumId, title])
}

model Sticker {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  page   AlbumPage @relation(fields: [pageId], references: [id])
  pageId Int

  card   CardModel @relation(fields: [cardId], references: [id])
  cardId Int

  order      Int
  identifier String

  @@unique([pageId, identifier])
}

model CardModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  record   PoliticianInRanking? @relation(fields: [recordId], references: [id])
  recordId Int?                 @unique

  variant  String @default("normal")
  imageUrl String

  Sticker Sticker[]
  Card    Card[]
}

model Card {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  model   CardModel @relation(fields: [modelId], references: [id])
  modelId Int

  isPasted Boolean @default(false)

  Deck   Deck? @relation(fields: [deckId], references: [id])
  deckId Int?
}

model Deck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  owner   Person @relation(fields: [ownerId], references: [id])
  ownerId Int

  album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  cards Card[]

  @@unique([ownerId, albumId])
}

// ENUMS -----------------------------------------------------------------

enum EconomicClass {
  A
  B
  C
  D
  E
}

enum SkinColor {
  White
  Black
  Brown
  Yellow
  Other
}

enum OrganizationType {
  PoliticalParty
  ThinkTank
  Media
  Government
}

enum Sex {
  Male
  Female
}

enum VoteOptions {
  Yes
  No
  Absent
}

enum VoteGuidanceOptions {
  Yes
  No
  Any
}
