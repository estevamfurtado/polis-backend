generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// MODELS -----------------------------------------------------------------

model State {
  id            Int             @unique @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  name          String
  abbreviation  String          @id @unique
  people        Person[]
  politicians   Politician[]
  candidates    Candidate[]
  RankingRecord RankingRecord[]
}

model Person {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name     String
  cpf      String? @unique
  password String?
  phone    String?
  email    String?

  birthDate     DateTime?
  sex           Sex?
  gender        String?
  economicClass EconomicClass?
  skinColor     SkinColor?

  voteState             State?  @relation(fields: [voteStateAbbreviation], references: [abbreviation])
  voteStateAbbreviation String?

  contact Contact?

  reactions Reaction[]

  politicianProfile Politician?
  candidateProfile  Candidate?

  deck   Card[]
  albums UserAlbum[]
}

model PoliticalParty {
  id        Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  cnpj           String  @unique
  name           String
  logoUrl        String?
  abbreviation   String  @id @unique
  email          String?
  password       String?
  mainColor      String?
  secondaryColor String?
  about          String?

  contact Contact?

  politicians Politician[]
  candidates  Candidate[]

  rankingRecords RankingRecord[]
}

model Contact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  phone     String?
  email     String?
  address   String?
  twitter   String?
  facebook  String?
  instagram String?
  linkedin  String?
  youtube   String?
  website   String?

  person   Person? @relation(fields: [personId], references: [id])
  personId Int?    @unique

  party             PoliticalParty? @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String?         @unique
}

model Candidate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String
  description String
  person      Person @relation(fields: [personId], references: [id])
  personId    Int    @unique

  party             PoliticalParty @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String

  state             State  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String

  reactions   Reaction[]
  shortVideos CandidateShortVideo[]
}

model CandidateShortVideo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title     String
  url       String
  thumbnail String?

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int       @unique
}

model Politician {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String
  description String
  person      Person @relation(fields: [personId], references: [id])
  personId    Int    @unique
  officialId  String @unique

  party             PoliticalParty @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String

  state             State  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String

  imageUrl String
  rankings RankingRecord[]
}

model Reaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  type ReactionTypes

  person   Person @relation(fields: [personId], references: [id])
  personId Int    @unique

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int       @unique

  imageUrl String
}

model Ranking {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  year    Int
  title   String
  records RankingRecord[]

  @@unique([year, title])
}

model RankingRecord {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  politician   Politician? @relation(fields: [politicianId], references: [id])
  politicianId Int?

  sourceId   String?
  sourceUrl  String?
  sourceName String?

  ranking   Ranking @relation(fields: [rankingId], references: [id])
  rankingId Int

  party             PoliticalParty? @relation(fields: [partyAbbreviation], references: [abbreviation])
  partyAbbreviation String?

  state             State?  @relation(fields: [stateAbbreviation], references: [abbreviation])
  stateAbbreviation String?

  candidateType String?

  quantityVote            Int?
  reelected               Boolean?
  cutAidShift             Boolean?
  isPresident             Boolean?
  cutHousingAllowance     Boolean?
  cutRetirement           Boolean?
  requestedFamilyPassport Boolean?
  quotaAmountSum          Int?

  scorePresence   Float?
  scoreSaveQuota  Float?
  scoreProcess    Float?
  scoreInternal   Float?
  scorePrivileges Float?
  scoreWastage    Float?
  scoreTotal      Float?

  scoreRanking           Int?
  scoreRankingByPosition Int?
  scoreRankingByParty    Int?
  scoreRankingByState    Int?

  scorePresenceFormula   String?
  scoreProcessFormula    String?
  scorePrivilegesFormula String?
  scoreSaveQuotaFormula  String?
  scoreWastageFormula    String?
  scoreTotalFormula      String?

  parliamentarianCount        Int?
  parliamentarianStateCount   Int?
  parliamentarianStaffMaxYear Float?
  parliamentarianQuotaMaxYear Float?

  card CardModel?

  @@unique([rankingId, politicianId])
}

model Album {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title       String
  year        Int
  description String

  coverUrl String
  thumbUrl String

  pages AlbumPage[]

  userAlbums UserAlbum[]

  @@unique([year, title])
}

model AlbumPage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title           String
  description     String
  backgroundColor String?

  album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  successorId Int?       @unique
  successor   AlbumPage? @relation("PagesOrder", fields: [successorId], references: [id])
  predecessor AlbumPage? @relation("PagesOrder")

  stickers Sticker[]

  @@unique([albumId, title])
}

model Sticker {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  page   AlbumPage @relation(fields: [pageId], references: [id])
  pageId Int

  card       CardModel @relation(fields: [cardId], references: [id])
  cardId     Int
  identifier String

  successorId Int?     @unique
  successor   Sticker? @relation("StickersOrder", fields: [successorId], references: [id])
  predecessor Sticker? @relation("StickersOrder")

  @@unique([pageId, identifier])
}

model CardModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  record   RankingRecord? @relation(fields: [recordId], references: [id])
  recordId Int?           @unique

  variant  String @default("normal")
  imageUrl String

  Sticker Sticker[]
  Card    Card[]
}

model Card {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  model   CardModel @relation(fields: [modelId], references: [id])
  modelId Int

  isPasted Boolean @default(false)

  owner   Person? @relation(fields: [ownerId], references: [id])
  ownerId Int?

  album   UserAlbum? @relation(fields: [albumId], references: [id])
  albumId Int?
}

model UserAlbum {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  user   Person @relation(fields: [userId], references: [id])
  userId Int

  cards Card[]

  @@unique([albumId, userId])
}

// ENUMS -----------------------------------------------------------------

enum EconomicClass {
  A
  B
  C
  D
  E
}

enum SkinColor {
  White
  Black
  Brown
  Yellow
  Other
}

enum Sex {
  Male
  Female
}

enum ReactionTypes {
  like
  dislike
}
